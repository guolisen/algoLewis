[TOC]



## 二分

[l, r)    while (l < r)    结束的时候 l == r

[l, r]    while (l <= r)  结束的时候 r < l



target <= mid

r = mid

mid <= target

l = mid



< > 常规判断，(<) 有= 左半边，无等号右半边

![img](https://images2015.cnblogs.com/blog/638419/201704/638419-20170425122731162-503571755.png)

```
如果有等号，target就会在当前if分支

while (l < r)

0 1 2 3 4 5
1 2 3 3 7 7

mid < target   (l = mid)    左              
      no=       =      
3     1(2)     3(3)   	// 如果等于，就会移动left，就会找最后边的3, 如果不等于，当3时就会移动right(mid - 1)，得到1(2)
5     3(3)     3(3)     // 如果有等号，target就会在当前if分支
<=1   0(1)     0(1) 
>=8   5(7)     5(7)

target < mid   (r = mid)    右
      no=       =      
3     4(7)     2(3)  // 如果有=，只要mid == target，r就会往左移，最终获得最左边的3.
5     4(7)     4(7)  // 如果没有=，当3时就会移动l(mid + 1)，得到4(7)
7     5(7)     4(7)  // 如果没有=，当mid == 3时, l(mid + 1)，l不能等于mid，所以肯定得不到target，而得到target右边的值
1     1(2)     0(1) 
<=0   0(1)     0(1)     
>=8   5(7)     5(7)


两种代码格式是固定的，只需要考虑是否加=号，只考虑最后迭代的几步即可

if (mid > target)      // 如果mid == target(查找target)，就会连续的r=mid，结果是最左边的target，
{					   
    r = mid;      // 如果求target的位置，都用这个分支，如果是求target左边或者右边的位置，用另外一个分支
}
else                   // 如果mid != target，就会一直l = mid + 1, 就会得到target右边第一个位置
{
    l = mid + 1;
}


```

```
while (l <= r)

0 1 2 3 4 5
1 2 3 3 7 7

mid < target
      no=         = 
     r   l      r   l      
1   -1   0      0   1       
3    1   2      3   4
5    3   4      3   4
<=0 -1   0     -1   0      
>=8  5   6      5   6

mid > target
      no=       =    
     r   l    r   l       
3    3   4    1   2
5    3   4    3   4
7    5   6    3   4
1    0   1   -1   0
<=0 -1   0   -1   0    
>=8  5   6    5   6
```

457 · 经典二分查找问题
```
class Solution {
public:
    int findPosition(vector<int> &nums, int target) {
        if (nums.empty())
            return -1;
        int m = nums.size();
        int l = 0;
        int r = m - 1;
        while (l < r)
        {
            int mid = (l + r) / 2;
            if (nums[mid] >= target)
            {
                r = mid;
            }
            else
            {
                l = mid + 1;
            }
        }

        if (nums[l] == target)
            return l;
        return -1;
    }
};
```
## 宽搜 深搜
433 · 岛屿的个数
```
class Solution {
public:
    /**
     * @param grid: a boolean 2D matrix
     * @return: an integer
     */

    bool isInBound(int x, int y, int m, int n)
    {
        if (x < 0 || x >= m || y < 0 || y >= n)
            return false;
        return true;
    }
    void bfs(vector<vector<bool>> &grid, int x, int y)
    {
        int m = grid.size();
        int n = grid[0].size();
        int dx[] = {-1, 1, 0, 0};
        int dy[] = {0, 0, 1, -1};
        queue<pair<int, int>> q;
        q.push({x, y});
        while (!q.empty())
        {
            auto pos = q.front(); q.pop();
            for (int d = 0; d < 4; d++)
            {
                int nx = pos.first + dx[d];
                int ny = pos.second + dy[d];
                if (!isInBound(nx, ny, m, n) || grid[nx][ny] != true)
                    continue;
                q.push({nx, ny});
                grid[nx][ny] = false;
            }
        }
    }
    int numIslands(vector<vector<bool>> &grid) {
        if (grid.empty())
            return 0;
        int m = grid.size();
        int n = grid[0].size();

        int res = 0;
        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (grid[i][j])
                {
                    res++;
                    bfs(grid, i, j);
                }
            }
        }
        return res;
    }
};
```

15 · 全排列
```
class Solution:
    """
    @param nums: A list of integers.
    @return: A list of permutations.
             we will sort your return value in output
    """
    def dfs(self, nums, order, cur, res):
        if len(cur) == len(nums):
            if cur not in res:
                res.append(list(cur))
            return
        m = len(nums)
        for i in range(m):
            if i in order:
                continue
            order.append(i)
            cur.append(nums[i])
            self.dfs(nums, order, cur, res)
            cur.pop(len(cur) - 1)
            order.pop(len(order) - 1)

    def permute(self, nums: List[int]) -> List[List[int]]:
        res = []
        self.dfs(nums, [], [], res)
        return res
```
```
class Solution {
public:
    void dfs(vector<int>& nums, int level, vector<bool> visit, vector<int> cur, vector<vector<int>>& res)
    {
        if (level == nums.size())
        {
            res.push_back(cur);
            return;
        }
        int m = nums.size();
        for (int i = 0; i < m; i++)
        {
            if (visit[i])
                continue;
            visit[i] = true;
            cur.push_back(nums[i]);
            dfs(nums, level + 1, visit, cur, res);
            cur.pop_back();
            visit[i] = false;
        }
    }
    vector<vector<int>> permute(vector<int> &nums) {
        int m = nums.size();
        vector<vector<int>> res;
        vector<bool> visit(m, false);
        dfs(nums, 0, visit, {}, res);
        return res;
    }
};
```

## GCD

845 · Greatest Common Divisor

```
int gcd(int a, int b)
{
    return b ? gcd(b, a % b) : a;
}
```

## Partition
```
        int m = A.size();
        int l = 0;
        int r = m - 1;
        while (l <= r)
        {
            while (l <= r && A[l] < 0) { l++; }
            while (l <= r && A[r] >= 0) { r--; }
            if (l < r)
            {
                swap(A[l], A[r]);
            }
        }
```

## 前缀和
404 · 子数组求和 II
```c++
#include <numeric>
class Solution {
public:
    int subarraySumII(vector<int> &a, int start, int end) {
        int m = a.size();
        vector<int> sum(m + 1, 0);
        partial_sum(a.begin(), a.end(), sum.begin() + 1);

        int res = 0;
        for (int len = 1; len <= m; len++)
        {
            for (int i = 0; i < m - len + 1; i++)
            {
                int j = i + len - 1;
                int s = sum[j + 1] - sum[i];
                if (s <= end && s >= start)
                    res++;
            }
        }
        return res;
    }
};
```
```python
    def subarray_sum_i_i(self, a: List[int], start: int, end: int) -> int:
        m = len(a)
        S = [0 for _ in range(m + 1)]
        for i in range(1, m + 1):
            S[i] = S[i - 1] + a[i - 1]

        res = 0
        for L in range(1, m + 1):
            for i in range(m - L + 1):
                j = i + L - 1
                ps = S[j + 1] - S[i]
                if ps >= start and ps <= end:
                    res += 1
        return res
```
## Heap
4 · 丑数 II
```
import heapq

class Solution:
    def nth_ugly_number(self, n: int) -> int:
        heap = []
        heapq.heappush(heap, 1)

        factor = [2, 3, 5]

        res = 1
        visit = [1]
        for i in range(n):
            cur = heapq.heappop(heap)
            res = cur
            for k in factor:
                if cur * k not in visit:
                    visit.append(cur * k)
                    heapq.heappush(heap, cur * k)
        return res
```
```
class Solution {
public:
    int nthUglyNumber(int n) {
        priority_queue<long long, vector<long long>, greater<long long>> q;
        q.push(1);
        unordered_set<long long> visit;
        long long res = 0;
        for (int i = 0; i < n; i++)
        {
            auto cur = q.top(); q.pop();
            res = cur;
            if (!visit.count(cur * 2))
            {
                q.push(cur * 2);
                visit.insert(cur * 2);
            }
            if (!visit.count(cur * 3))
            {
                q.push(cur * 3);
                visit.insert(cur * 3);
            }
            if (!visit.count(cur * 5))
            {
                q.push(cur * 5);
                visit.insert(cur * 5);
            }
        }
        return (int)res;
    }
};
```
## 并查集

## tri树

## priority_queue lamda
612 · K个最近的点
```
/**
 * Definition for a point.
 * struct Point {
 *     int x;
 *     int y;
 *     Point() : x(0), y(0) {}
 *     Point(int a, int b) : x(a), y(b) {}
 * };
 */

class Solution {
public:
    /**
     * @param points: a list of points
     * @param origin: a point
     * @param k: An integer
     * @return: the k closest points
     */
    int dist(Point& p1, Point& p2)
    {
        return pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2);
    }
    vector<Point> kClosest(vector<Point> &points, Point origin, int k) {
        int m = points.size();
        priority_queue<Point, vector<Point>, std::function<bool(Point&, Point&)>> q(
            [&](Point& a, Point& b)
            {
                int dista = dist(a, origin);
                int distb = dist(b, origin);
                if (dista > distb)
                {
                    return true;
                }
                else if (dista == distb)
                {
                    if (a.x != b.x)
                    {
                        return a.x > b.x;
                    }
                    else
                    {
                        return a.y > b.y;
                    }
                }
                return false;
            }
        );

        for (auto p : points)
        {
            q.push(p);
        }

        vector<Point> res;
        for (int i = 0; i < k; i++)
        {
            res.push_back(q.top());
            q.pop();
        }
        return res;
    }
};
```

## vector初始化

```
vector<vector<int>> dp(m, vector<int>(n, 1));
```

## 质数

### 1324 · Count Primes

```
class Solution {
public:
    vector<int> primes;
    int cnt = 0;   
    bool st[2000000];     
    int res = 0;
    Solution(): primes(2000000, 0) {}

    void get_primes(int n)
    {
        for (int i = 2; i <= n; i ++ )
        {
            if (!st[i]) 
            {
                primes[cnt ++ ] = i;
            }
            for (int j = 0; primes[j] <= n / i; j ++ )
            {
                st[primes[j] * i] = true;
                if (i % primes[j] == 0) break;
            }
        }
    }

    int countPrimes(int n) {
        get_primes(n);

        for (auto c : primes)
            if (c != 0 && c != n)
                res++;
        return res;
    }
};
```
```
class Solution:
    def count_primes(self, n: int) -> int:
        if n <= 2:
            return 0
        res = 0
        is_primes = [True for _ in range(n)]
        for i in range(2, n):
            if is_primes[i]:
                res += 1
                for j in range(2, n):
                    if i * j >= n:
                        break
                    is_primes[i*j] = False
        return res
```